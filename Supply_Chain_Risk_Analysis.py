# -*- coding: utf-8 -*-
"""Supply Chain Risk Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FSZEKpm178h66H8mpd4Zs_H_2A01Cyx4

# Supply Chain Risk Analysis

> Identify high-risk suppliers based on performance metrics like delivery delays, defect rates, and external risk factors.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="whitegrid")

"""## Data Loading and Initial Exploration

> Load the dataset and review key attributes for cleaning and analysis.
"""

df = pd.read_csv('/content/drive/MyDrive/DATASETS/supply_chain_data.csv')

df.info()

df.head()

"""## Data Cleaning

> Handle missing values

> Drop duplicates

> Standardize column formats
"""

# Standardizing column names
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')

# Checking for duplicates
duplicates = df.duplicated().sum()

# Checking for nulls
nulls = df.isnull().sum().sum()

print(f"Duplicates: {duplicates}")
print("Null Values:", nulls)

# Checking data types
df.dtypes

# Inspect unique values in key categorical columns
categorical_cols = ['product_type', 'customer_demographics', 'shipping_carriers',
                    'supplier_name', 'location', 'inspection_results',
                    'transportation_modes', 'routes']

for col in categorical_cols:
    print(df[col].value_counts())
    print("--------------")

# Replacing 'Unknown' in customer_demographics with NaN
df['customer_demographics'] = df['customer_demographics'].replace('Unknown', pd.NA)

"""## EDA

> To understand the factors that may contribute to supplier risk, discover patterns, and prepare for future modeling or scoring.
"""

df.describe()

numeric_cols = ['defect_rates', 'manufacturing_costs',
                'lead_time', 'shipping_costs', 'revenue_generated']

rows = 3
cols = 2
fig, axes = plt.subplots(rows, cols, figsize=(12, 6))
axes = axes.flatten()  # Flatten to easily index

# Creating histograms in grid
for i, col in enumerate(numeric_cols):
    sns.histplot(df[col], kde=True, bins=20, ax=axes[i])
    axes[i].set_title(f'Distribution of {col.replace("_", " ").title()}')
    axes[i].set_xlabel(col.replace("_", " ").title())
    axes[i].set_ylabel('Frequency')

# Removing empty subplot if any
if len(numeric_cols) < len(axes):
    for j in range(len(numeric_cols), len(axes)):
        fig.delaxes(axes[j])
plt.tight_layout()
plt.show()

"""* **Distribution of Defect Rates:** Most defect rates are skewed toward the lower end, indicating that the majority of products pass inspection with relatively few defects. However, a few suppliers still exhibit moderate to high defect rates (>3), which may require quality improvement actions.

* **Distribution of Manufacturing Costs:** Manufacturing costs are fairly uniformly distributed, with a slight peak at the higher end.

* **Distribution of Lead Time:** Lead times are spread across a broad range. This indicates inconsistency in supplier responsiveness and fulfillment.

* **Distribution of Shipping Costs:** Outliers exist at both low and high ends, indicating differences in shipping methods, regions, or carrier contracts.

* **Distribution of Revenue Generated:** Revenue distribution is right-skewed, with a concentration of lower revenue values and a long tail toward higher revenue. This implies a few high-performing suppliers drive most of the revenue.
"""

plt.figure(figsize=(8, 4))
sns.violinplot(x='supplier_name', y='defect_rates', data=df,
                   order=['Supplier 1', 'Supplier 2', 'Supplier 3', 'Supplier 4', 'Supplier 5'])
plt.title('Defect Rates by Supplier')
plt.xlabel('Supplier')
plt.ylabel('Defect Rate (%)')
plt.tight_layout()
plt.show()

"""* **Supplier 1:** Lowest and most consistent defect rates — best quality.

* **Supplier 2:** Moderate defects with some variation — monitor regularly.

* **Supplier 3:** Higher median defects — may need quality checks.

* **Supplier 4:** Broad defect spread — inconsistent performance.

* **Supplier 5:** Highly variable defects — quality is unreliable.
"""

plt.figure(figsize=(8, 6))
sns.scatterplot(x='lead_time', y='shipping_costs', size='order_quantities',
                hue='transportation_modes', palette='ocean', data=df, sizes=(40, 400),alpha=0.7)
plt.title('Shipping Cost vs Lead Time')
plt.xlabel('Lead Time (days)')
plt.ylabel('Shipping Costs')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

"""* **Air transport** tends to have higher shipping costs, even with shorter lead times.

* **Sea shipments** show low cost, but often have **longer lead times**.

* **Road and Rail** are spread out, offering a mix of cost-efficiency and time.

* **Larger order quantities** are not strictly tied to any specific transport mode.

* There's no clear linear correlation between shipping cost and lead time across all modes.

## Feature Engineering
"""

# Defect Risk Category
# Categorizing suppliers based on defect rates
def classify_defect_risk(rate):
    if rate < 2:
        return 'Low'
    elif 2 <= rate <= 4:
        return 'Medium'
    else:
        return 'High'

df['defect_risk_category'] = df['defect_rates'].apply(classify_defect_risk)

# Distribution of Defect Risk Categories
plt.figure(figsize=(6, 4))
sns.countplot(
    x='defect_risk_category',
    data=df,
    hue='defect_risk_category',
    palette='ocean',
    order=['Low', 'Medium', 'High']
)
plt.title('Distribution of Defect Risk Categories')
plt.xlabel('Defect Risk Category')
plt.ylabel('Number of Suppliers')
plt.show()

"""* **Low risk:** Majority of suppliers fall under this category.
* **Medium risk:** A significant number of suppliers are in this group.
* **High-risk:** Only few suppliers but it's critical and need monitoring.
"""

# Shipping Efficiency Score
# A combined metric: lead_time * shipping_costs
df['shipping_efficiency_score'] = df['lead_time'] * df['shipping_costs']

# Distribution of Shipping Efficiency Score
plt.figure(figsize=(7, 4))
sns.histplot(
    df['shipping_efficiency_score'],
    kde=True,
    bins=20,
    color='skyblue'
)
plt.title('Distribution of Shipping Efficiency Score')
plt.xlabel('Shipping Efficiency Score')
plt.ylabel('Frequency')
plt.show()

"""* The distribution is **right-skewed**, meaning:

  * **Majority of suppliers** have **low to moderate efficiency**.
  * **Fewer suppliers** reach **high efficiency**.
* The spread indicates not all suppliers are equally efficient.
"""

# Inspection Pass Flag
# Binary flag from inspection results: 1 if Pass, else 0
df['inspection_pass_flag'] = df['inspection_results'].apply(
    lambda x: 1 if str(x).strip().lower() == 'pass' else 0
)

# Inspection Pass Rate by Defect Risk Category
plt.figure(figsize=(6, 4))
sns.barplot(
    x='defect_risk_category',
    y='inspection_pass_flag',
    data=df,
    order=['Low', 'Medium', 'High'],
    hue='defect_risk_category',
    palette='Blues',
    errorbar=None  # No error bars
)
plt.title('Average Inspection Pass Rate by Defect Risk Category')
plt.xlabel('Defect Risk Category')
plt.ylabel('Inspection Pass Rate')
plt.show()

"""* Low defect risk suppliers have the highest average inspection pass rate.

* Medium-risk suppliers perform moderately well.

* High-risk suppliers have the lowest inspection pass rate.
"""

# Cost Per Unit
# Total cost per product = (manufacturing + shipping) / quantity
df['cost_per_unit'] = (
    (df['manufacturing_costs'] + df['shipping_costs']) / df['order_quantities']
)

# Cost Per Unit by Top Suppliers
top_suppliers = df['supplier_name'].value_counts().head(10).index

plt.figure(figsize=(10, 5))
sns.boxplot(
    x='supplier_name',
    y='cost_per_unit',
    data=df[df['supplier_name'].isin(top_suppliers)],
    hue='supplier_name',
    order=['Supplier 1', 'Supplier 2', 'Supplier 3', 'Supplier 4', 'Supplier 5'],
    palette='Blues'
)
plt.yscale('log') # becaus of extreme outliers
plt.title('Cost Per Unit by Top Suppliers')
plt.xlabel('Supplier Name')
plt.ylabel('Cost Per Unit')
plt.show()

"""* **Supplier 1:** Low and stable costs with minimal outliers.
* **Supplier 2:** Low median cost but with moderate outliers, indicating occasional spikes.
* **Supplier 3:** Similar to Supplier 1, with slightly higher spread but fewer extreme values.
* **Supplier 4:** Highest variability and cost spikes—least cost-efficient.
* **Supplier 5:** Low costs, slightly more spread, but still relatively efficient.


Supplier 1 and 3 are consistent; Supplier 2 is economical with occasional spikes; Supplier 4 is risky cost-wise.

"""

# Lead Time Risk
# Flaging if lead_time is considered risky (> 20 days)
df['lead_time_risk'] = df['lead_time'].apply(lambda x: 1 if x > 20 else 0)

#Subplots
fig, axes = plt.subplots(1, 2, figsize=(14, 5))

# Plot 1: Distribution of Lead Time
sns.histplot(
    df['lead_time'],
    kde=True,
    bins=20,
    color=sns.color_palette("Blues")[4],
    ax=axes[0]
)
axes[0].set_title('Distribution of Lead Time')
axes[0].set_xlabel('Lead Time (days)')
axes[0].set_ylabel('Frequency')

# Plot 2: Lead Time Risk Flag Count
sns.countplot(
    x='lead_time_risk',
    data=df,
    hue='lead_time_risk',
    palette=sns.color_palette("Blues", 2),
    ax=axes[1]
)
axes[1].set_title('Count of Suppliers by Lead Time Risk')
axes[1].set_xlabel('Lead Time Risk')
axes[1].set_ylabel('Count')
axes[1].set_xticks([0, 1])
axes[1].set_xticklabels(['Low Risk', 'High Risk'])

plt.show()

"""**Distribution of Lead Time**

* Shows how many suppliers have different lead times.
* The distribution is **slightly right-skewed**, meaning more suppliers deliver quicker, but some take longer.

**Count of Suppliers by Lead Time Risk**

* **Low Risk (lead\_time\_risk = 0):** Majority of suppliers fall in this category.
* **High Risk (lead\_time\_risk = 1):** A significant number still pose risk due to longer or inconsistent lead times.

"""

# Selecting numeric engineered features
engineered_numeric = df[[
    'shipping_efficiency_score',
    'inspection_pass_flag',
    'cost_per_unit',
    'lead_time',
    'lead_time_risk'
]]

# Correlation matrix
corr = engineered_numeric.corr()

# Ploting heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(corr, annot=True, cmap='Blues', fmt='.2f', linewidths=0.5)
plt.title('Correlation Heatmap of Engineered Features')
plt.show()

"""## Risk Scoring

> A supplier risk score is a single numeric value (or category like "High", "Medium", "Low") that summarizes how risky a supplier is — based on factors like delays, defects, high costs, failed inspections, etc.
"""

def map_defect_risk(category):
    return {'Low': 0, 'Medium': 1, 'High': 2}[category]

def normalize_column(col):
    return (col - col.min()) / (col.max() - col.min())  # Scale 0–1

# Computing components
df['defect_risk_score'] = df['defect_risk_category'].map(map_defect_risk)

df['cost_per_unit_norm'] = normalize_column(df['cost_per_unit'])

df['shipping_eff_score_norm'] = normalize_column(df['shipping_efficiency_score'])

"""| Feature                     | Risk Signal                     | Weight |
| --------------------------- | ------------------------------- | ---------------- |
| defect_risk_category      | High defects = high risk        | 3                |
| lead_time_risk            | Lead time > 20 days = risky     | 2                |
| inspection_pass_flag      | Fail/Pending = risky            | 2                |
| cost_per_unit             | High unit cost = less efficient | 1                |
| shipping_efficiency_score | High cost × delay = inefficient | 2                |

"""

# Weighted risk score
df['supplier_risk_score'] = (
    df['defect_risk_score'] * 3 +
    df['lead_time_risk'] * 2 +
    (1 - df['inspection_pass_flag']) * 2 +
    df['cost_per_unit_norm'] * 1 +
    df['shipping_eff_score_norm'] * 2
)

# Top 10 highest risk
df[['supplier_name', 'supplier_risk_score']].sort_values(by='supplier_risk_score', ascending=False).head(10)

# Average risk score per supplier
df.groupby('supplier_name')['supplier_risk_score'].mean().sort_values(ascending=False)

# Distribution plot of all risk scores
sns.histplot(df['supplier_risk_score'], bins=20, kde=True, color='skyblue')
plt.title("Distribution of Supplier Risk Scores")
plt.xlabel("Risk Score")
plt.ylabel("Number of Suppliers")
plt.tight_layout()
plt.show()

"""Most suppliers have moderate risk scores, with a few showing very low or high risks.
The distribution is relatively even but slightly right-skewed.
"""

def label_risk(score):
    if score < 2:
        return 'Low'
    elif 2 <= score < 4:
        return 'Medium'
    else:
        return 'High'

df['risk_level'] = df['supplier_risk_score'].apply(label_risk)

sns.set(style="whitegrid")
plt.figure(figsize=(6, 4))
sns.countplot(
    x='risk_level',
    data=df,
    order=['Low', 'Medium', 'High'],
    hue='risk_level',
    palette='Blues'
)
plt.title('Supplier Risk Level Distribution')
plt.xlabel('Risk Level')
plt.ylabel('Number of Suppliers')
plt.show()

"""Most suppliers fall into the high-risk category, with very few falling into low-risk category.
This shows some potential reliability concerns.

## Supplier Segmentation using KMeans

> Cluster suppliers into Low, Medium, and High risk using KMeans on the risk score.
"""

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

# Numerical features to cluster on
features = [
    'defect_risk_score',
    'inspection_pass_flag',
    'lead_time_risk',
    'cost_per_unit_norm',
    'shipping_eff_score_norm'
]

X = df[features].copy()

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# KMeans clustering (choosing k=3 for now)
kmeans = KMeans(n_clusters=3, random_state=42)
df['supplier_cluster'] = kmeans.fit_predict(X_scaled)

# Average profile of each cluster
cluster_summary = df.groupby('supplier_cluster')[features].mean().round(2)
cluster_summary

# Reduce to 2 dimensions
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# Apply KMeans again
kmeans_final = KMeans(n_clusters=3, random_state=42)
clusters = kmeans_final.fit_predict(X_scaled)

# Visualize
plt.figure(figsize=(6, 3))
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=clusters, palette="deep")
plt.title(f"KMeans Clusters (k={3}) with PCA")
plt.xlabel("PCA Component 1")
plt.ylabel("PCA Component 2")
plt.legend(title="Cluster")
plt.grid(True)
plt.show()

"""## Insights

> Visualizations of risk across regions and suppliers.
"""

# Group by location
location_risk = df.groupby('location')['supplier_risk_score'].mean().sort_values(ascending=False).reset_index()

# Plot
plt.figure(figsize=(8, 5))
sns.barplot(x='location', y='supplier_risk_score', data=location_risk,
            hue='location', palette='Blues_d')
plt.title('Average Supplier Risk by Location')
plt.xlabel('Location')
plt.ylabel('Average Risk Score')
plt.tight_layout()
plt.show()

"""**Geographic risk concentration**

Chennai and Kolkata rank the highest after checking the average risk scores of all geographic locations and they need to focus and apply stricter control mesures on on those suppliers.
"""

# Sort suppliers by average risk
ordered_suppliers = df.groupby('supplier_name')['supplier_risk_score'].mean().sort_values().index

plt.figure(figsize=(10, 5))
sns.boxplot(x='supplier_name', y='supplier_risk_score', data=df,
            order=ordered_suppliers, hue='supplier_name',
            palette='Blues')
plt.title('Supplier Risk Score Distribution')
plt.xlabel('Supplier')
plt.ylabel('Risk Score')
plt.tight_layout()
plt.show()

"""**Supplier 1** appears least risky, with a low median and consistent risk score.

**Supplier 5** has a similar median but a much wider range of risk score which indicating more inconsistency in performance.

**Supplier 3** shows is similar to Supplier 5.

**Supplier 2 and 4** have average risk and are fairly stable.

## Supplier Risk Recommendations
"""

def generate_recommendation(row):
    if row['risk_level'] == 'High':
        if row['defect_risk_category'] == 'High' or row['cost_per_unit'] > 1:
            return 'Consider replacement'
        elif row['defect_risk_category'] == 'Medium':
            return 'Negotiate pricing'
        else:
            return 'Audit supplier'
    elif row['risk_level'] == 'Medium':
        return 'Monitor performance'
    else:
        return 'Maintain relationship'

# Apply to dataframe
df['recommendation'] = df.apply(generate_recommendation, axis=1)

df[['supplier_name', 'risk_level', 'defect_risk_category', 'cost_per_unit', 'recommendation']].head(10)

# Count recommendations
recommendation_counts = df['recommendation'].value_counts().reset_index()
recommendation_counts.columns = ['Recommendation', 'Count']

# Plot
plt.figure(figsize=(8, 5))
sns.barplot(data=recommendation_counts, x='Recommendation', y='Count', hue='Recommendation', palette='Blues')
plt.title('Supplier Recommendations Overview')
plt.xticks(rotation=15)
plt.tight_layout()
plt.show()

"""Most suppliers are recommended for replacement or monitoring, highlighting risk concerns.

Few require pricing negotiation, and only a handful need auditing or relationship maintenance.

## Conclusion

We analyzed supplier data to group similar suppliers and assess their risks. This helped us understand which suppliers are reliable and which ones need attention. Based on this, we gave clear actions like replacing, monitoring, or keeping good suppliers.

Most suppliers fall into medium to high risk categories, with Chennai suppliers showing the highest average risk.

> Smarter supplier decisions and better risk control.
"""